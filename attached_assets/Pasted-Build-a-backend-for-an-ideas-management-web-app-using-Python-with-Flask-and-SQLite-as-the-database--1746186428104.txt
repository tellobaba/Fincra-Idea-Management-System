Build a backend for an ideas management web app using Python with Flask and SQLite as the database, integrated with my existing frontend. The app allows users to submit ideas, challenges, or pain points, and admins to view, group, and prioritize submissions. Here are the detailed requirements:

1. **Technology Stack**:
   - Use Python with Flask for the backend.
   - Use SQLite for the database (store it as `ideas.db`).
   - Enable CORS to allow communication with my frontend hosted on Replit.
   - Serve my existing static frontend files (HTML, JS, CSS) from a `static` folder.

2. **Database Schema**:
   - Create a table `ideas` with columns: `id` (auto-incrementing primary key), `type` (text, e.g., 'idea', 'challenge', 'pain_point'), `description` (text), `created_at` (timestamp, default to current time).
   - Create a table `admins` with columns: `id` (auto-incrementing primary key), `username` (text, unique), `password_hash` (text for hashed password).

3. **API Endpoints**:
   - `POST /api/submit_idea`: Accept JSON with `type` and `description`. Validate inputs and store in the `ideas` table. Return a success message (201) or error (400).
   - `GET /api/chart_data`: Return JSON with two arrays: `labels` (distinct idea types) and `counts` (number of submissions per type) for the frontend bar chart (compatible with Chart.js).
   - `POST /api/admin/login`: Accept JSON with `username` and `password`. Validate against `admins` table using secure password hashing (e.g., werkzeug). Set a session for authenticated admins. Return success (200) or error (401).
   - `GET /api/admin/ideas`: Return all ideas from the `ideas` table as JSON, but only if the admin is logged in (check session). Return unauthorized (401) if not logged in.
   - `POST /api/admin/group_ideas`: Accept JSON with `criteria` (e.g., 'type'). Return grouped data (e.g., count of ideas by type) as JSON, only for logged-in admins.

4. **Admin Setup**:
   - On startup, create a default admin account with username `admin` and password `securepassword123` (hashed securely) if no admins exist in the `admins` table.

5. **Frontend Integration**:
   - My frontend has a form for submitting ideas (POST to `/api/submit_idea` with `type` and `description`).
   - The main page has a Chart.js bar chart. Update it by fetching data from `/api/chart_data` to replace fake data with real counts of ideas by type.
   - The admin login page sends `username` and `password` to `/api/admin/login`. On success, redirect to an admin dashboard that fetches all ideas from `/api/admin/ideas` and displays them in a table.
   - Ensure the admin dashboard can send a POST request to `/api/admin/group_ideas` to group ideas by type.

6. **Security and Error Handling**:
   - Validate all inputs to prevent SQL injection or invalid data.
   - Use secure password hashing for admin accounts.
   - Return clear error messages in JSON for failed requests.
   - Protect admin routes with session-based authentication.

7. **Deployment**:
   - Configure the app to run on Replitâ€™s default port (8080) and host (0.0.0.0).
   - Ensure the backend serves my static frontend files correctly.
   - Deploy the app on Replit with a `.replit` file to run `python app.py`.

8. **Additional Notes**:
   - My frontend is in a `static` folder with files like `index.html`, `admin.html`, and `scripts.js`.
   - The bar chart in `index.html` uses Chart.js and currently displays fake data. Update it to use real data from `/api/chart_data`.
   - Provide comments in the code to explain key sections.
   - If errors occur, suggest fixes in the Replit console.

Please propose a step-by-step plan for building this backend, including file structure, dependencies (e.g., flask, flask-cors, werkzeug), and integration with my frontend. After I approve the plan, generate the necessary code, install dependencies, and deploy the app on Replit. If any clarification is needed, ask me before proceeding.